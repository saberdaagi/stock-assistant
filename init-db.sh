#!/bin/bash
set -e

# Create tables
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
                
            -- ================================
            -- TABLE: product
            -- ================================
            CREATE TABLE product (
                id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                category        VARCHAR(20) NOT NULL CHECK (category IN ('ELECTRONICS', 'HARDWARE', 'CONSUMABLES')),
                created_at      TIMESTAMP(6) NOT NULL,
                description     VARCHAR(500),
                name            VARCHAR(100) NOT NULL,
                sku             VARCHAR(20) NOT NULL UNIQUE,
                unit_of_measure VARCHAR(10) CHECK (unit_of_measure IN ('UNIT', 'KILOGRAM', 'LITER', 'METER')),
                updated_at      TIMESTAMP(6) NOT NULL,
                uuid            UUID NOT NULL UNIQUE,
                price           NUMERIC(10, 2) NOT NULL
            );
            

            -- ================================
            -- TABLE: warehouses
            -- ================================
            CREATE TABLE warehouses (
                id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                capacity    INTEGER NOT NULL,
                created_at  TIMESTAMP(6) NOT NULL,
                location    VARCHAR(255) NOT NULL,
                name        VARCHAR(100) NOT NULL,
                updated_at  TIMESTAMP(6) NOT NULL,
                uuid        UUID NOT NULL UNIQUE
            );
            

            -- ================================
            -- TABLE: inventory
            -- ================================
            CREATE TABLE inventory (
                id                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                last_stock_update TIMESTAMP(6) NOT NULL,
                quantity          INTEGER NOT NULL,
                uuid              UUID NOT NULL UNIQUE,
                product_id        BIGINT REFERENCES product(id),
                warehouse_id      BIGINT REFERENCES warehouses(id)
            );
            

            -- ================================
            -- INSERT: product
            -- ================================
            INSERT INTO product (category, created_at, description, name, sku, unit_of_measure, updated_at, uuid, price) VALUES
            ('ELECTRONICS', NOW(), 'Smartphone with AMOLED screen', 'AlphaPhone X', 'SKU001', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('HARDWARE', NOW(), 'Electric drill with variable speed', 'DrillPro 500', 'SKU002', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('CONSUMABLES', NOW(), 'Pack of 6 alkaline batteries', 'PowerCells AA', 'SKU003', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('ELECTRONICS', NOW(), 'Bluetooth wireless earbuds', 'SoundPods Z', 'SKU004', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('HARDWARE', NOW(), 'Screwdriver set with magnet tips', 'FixIt Set', 'SKU005', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('CONSUMABLES', NOW(), 'Multi-purpose cleaning wipes', 'CleanWipes', 'SKU006', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('ELECTRONICS', NOW(), 'Smartwatch with fitness tracking', 'TimeFit', 'SKU007', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('HARDWARE', NOW(), 'Heavy-duty extension cord', 'PowerLine X', 'SKU008', 'METER', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('CONSUMABLES', NOW(), 'Refill ink cartridge', 'InkPro 45', 'SKU009', 'LITER', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2)),
            ('ELECTRONICS', NOW(), 'Tablet with 10-inch screen', 'TabUltra', 'SKU010', 'UNIT', NOW(), gen_random_uuid(), ROUND((random() * 495 + 5)::numeric, 2));

            -- ================================
            -- INSERT: warehouses
            -- ================================
            INSERT INTO warehouses (capacity, created_at, location, name, updated_at, uuid) VALUES
            (1000, NOW(), 'New York', 'Main East Warehouse', NOW(), gen_random_uuid()),
            (800, NOW(), 'Los Angeles', 'West Coast Storage', NOW(), gen_random_uuid()),
            (500, NOW(), 'Chicago', 'Midwest Depot', NOW(), gen_random_uuid()),
            (1200, NOW(), 'Houston', 'Southern Hub', NOW(), gen_random_uuid()),
            (600, NOW(), 'Miami', 'Florida Stockroom', NOW(), gen_random_uuid()),
            (700, NOW(), 'Seattle', 'Pacific Storage', NOW(), gen_random_uuid()),
            (900, NOW(), 'Denver', 'Rocky Mountain Warehouse', NOW(), gen_random_uuid()),
            (650, NOW(), 'Boston', 'Northeast Node', NOW(), gen_random_uuid()),
            (750, NOW(), 'San Francisco', 'Bay Area Reserve', NOW(), gen_random_uuid()),
            (1100, NOW(), 'Atlanta', 'Southeast Logistics', NOW(), gen_random_uuid());

            -- ================================
            -- INSERT: inventory
            -- ================================
            INSERT INTO inventory (last_stock_update, quantity, uuid, product_id, warehouse_id) VALUES
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 1, 1),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 2, 2),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 3, 3),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 4, 4),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 5, 5),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 6, 6),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 7, 7),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 8, 8),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 9, 9),
            (NOW(), floor(random() * 100 + 1)::int, gen_random_uuid(), 10, 10);
EOSQL

echo "Database initialization complete!" 